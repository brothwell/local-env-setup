- name: Set up local environment
  hosts: localhost
  connection: local
  become: yes
  become_user: root
  become_method: sudo
  tasks:

    # Disable Auto-adding of Network Printers
    - name: Disable Auto-adding of Network Printers
      service:
        name: cups-browsed
        state: stopped

    # Install GU Firewall
    - name: Install GU Firewall
      apt:
        name: gufw
        update_cache: yes

    # Install Development Packages
    - name: Install Development Packages
      apt:
        name: "{{ dev_packages }}"
        update_cache: yes
      vars:
        dev_packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg2
        - vim
        - dirmngr
        - zlib1g
        - nfs-common
        - cifs-utils

    # Install OpenJDK
    - name: "Install OpenJDK {{ openjdk_version | default('11') }}"
      apt:
        name: openjdk-{{ openjdk_version | default('11') }}-jdk
        state: latest
        install_recommends: no
        update_cache: yes
    - name: Confirm java is installed
      shell: java --version
      register: java_result
      ignore_errors: yes
    - debug:
         var: java_result

    # Install Maven
    - name: Install Maven
      apt:
        name: maven
        state: latest
        install_recommends: no
        update_cache: yes
    - name: Confirm Maven is installed
      shell: mvn --version
      register: maven_result
      ignore_errors: yes
    - debug:
         var: maven_result
    
    # Install Kotlin
    - name: Install Kotlin
      snap:
        name: kotlin
        classic: yes  
    - name: Confirm Kotlin is installed
      shell: kotlinc -version
      register: kotlin_result
      ignore_errors: yes
    - debug:
         var: kotlin_result
    
    # Install Go
    - name: Install Go
      apt:
        name: golang
        state: latest
        update_cache: yes
    - name: Confirm Go is installed
      shell: go version
      register: go_result
      ignore_errors: yes
    - debug:
         var: go_result
    
    # Install Docker
    - name: Create directory for apt repository keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        recurse: yes
        mode: '0755'
    - name: Check that Docker apt repository key exists
      stat:
        path: /etc/apt/keyrings/docker.asc
      register: docker_key_result
    - name: Add Docker apt repository key
      shell: >
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg
        -o /etc/apt/keyrings/docker.asc && 
        chmod a+r /etc/apt/keyrings/docker.asc
      when: docker_key_result.stat.exists == False
    - name: Check that Docker apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_list_result
    - name: Add apt repository for stable version of Docker
      shell: >
        echo "deb [arch=$(dpkg --print-architecture)
        signed-by=/etc/apt/keyrings/docker.asc]
        https://download.docker.com/linux/ubuntu
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: docker_list_result.stat.exists == False
    - name: Install Docker
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
    - name: Confirm Docker is installed
      shell: docker version
      register: docker_result
      ignore_errors: yes
    - debug:
         var: docker_result 
      
    # Install Docker-Compose
    - name: Install Docker-Compose
      apt:
        name: docker-compose
        update_cache: yes
    - name: Confirm Docker-Compose is installed
      shell: docker-compose --version
      register: docker_compose_result
      ignore_errors: yes
    - debug:
         var: docker_compose_result    
        
    # Install .NET Core SDK
    - name: Install .NET Core SDK and Runtime
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - dotnet-sdk-{{ dotnet_version | default('8.0') }}
          - aspnetcore-runtime-{{ dotnet_version | default('8.0') }}
          - dotnet-runtime-{{ dotnet_version | default('8.0') }}
    - name: Confirm .NET SDK and Runtime is installed
      shell: dotnet --info
      register: dotnet_result
      ignore_errors: yes
    - debug:
         var: dotnet_result

    # Install Python
    - name: Install Python development environment packages
      apt:
        name: "{{ python_packages }}"
        update_cache: yes
      vars:
        python_packages:
        - python{{ python_version | default('3') }}-pip
        - build-essential
        - libssl-dev
        - libffi-dev
        - python{{ python_version | default('3') }}-dev
        - python{{ python_version | default('3') }}-venv

    # Install Node.JS and NPM
    - name: Run NodeJS install script
      shell: "curl -fsSL https://deb.nodesource.com/setup_{{ node_version | default('22') }}.x | sudo -E bash"
    - name: Install Node.js
      apt:
        name: nodejs
        update_cache: yes
    - name: Confirm NodeJS is installed
      shell: node -v
      register: node_result
      ignore_errors: yes
    - debug:
         var: node_result
    - name: Confirm NPM is installed
      shell: npm --version
      register: npm_result
      ignore_errors: yes
    - debug:
         var: npm_result

    # Install Create React App
    - name: Install Create React App
      npm:
        name: create-react-app
        global: yes
        state: present
    - name: Confirm Create React App is installed
      shell: create-react-app --version
      register: react_result
      ignore_errors: yes
    - debug:
         var: react_result         

    # Install Angular CLI
    - name: Install Angular CLI
      npm:
        name: "@angular/cli"
        global: yes
        state: present
    - name: Confirm Angular CLI is installed
      shell: ng version
      register: ng_result
      ignore_errors: yes
    - debug:
         var: ng_result

    # Install Kubectl
    - name: Check that Google Cloud repository gpg exists
      stat:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      register: google_gpg_result
    - name: Install Google Cloud public signing key
      shell: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key |
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg &&
        chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg 
      check_mode: no
      when: google_gpg_result.stat.exists == False
    - name: Check that the Kubernetes apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/kubernetes.list
      register: kubernetes_list_result
    - name: Add the Kubernetes apt repository
      shell: >
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg]
        https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | 
        tee /etc/apt/sources.list.d/kubernetes.list &&
        chmod 644 /etc/apt/sources.list.d/kubernetes.list
      check_mode: no
      when: kubernetes_list_result.stat.exists == False
    - name: Install Kubectl
      apt:
        name: kubectl
        update_cache: yes
      check_mode: no
    - name: Confirm Kubectl is installed
      shell: kubectl version --client
      register: kubectl_result
      ignore_errors: yes
    - debug:
         var: kubectl_result

    # Install Kustomize
    - name: Get Kustomize install script
      get_url:
        url: https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh
        dest: /tmp/install_kustomize.sh
        mode: +x
      register: result
      retries: 3
      until: result is success
    - name: Install Kustomize
      shell: /tmp/install_kustomize.sh && mv ./kustomize  /usr/local/bin/kustomize && export PATH=$PATH:/usr/local/bin/kustomize
    - name: Confirm Kustomize is installed
      shell: kustomize version
      register: kustomize_result
      ignore_errors: yes
    - debug:
         var: kustomize_result

    # Install Sublime Text
    - name: Check that SubLime Text GPG Key exists
      stat:
        path: /etc/apt/keyrings/sublimehq-pub.gpg
      register: sublime_gpg_result
    - name: Install GPG key for SubLime Text
      shell: curl -fsSL https://download.sublimetext.com/sublimehq-pub.gpg | gpg --batch --yes --dearmor -o /etc/apt/keyrings/sublimehq-pub.gpg
      check_mode: no
      when: sublime_gpg_result.stat.exists == False
    - name: Check that SubLime Text apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/sublimetext.list
    - name: Add SubLime Text apt repository
      shell: >
        echo "deb [arch=$(dpkg --print-architecture)
        signed-by=/etc/apt/keyrings/sublimehq-pub.gpg]
        https://download.sublimetext.com/ apt/stable/" |
        tee /etc/apt/sources.list.d/sublimetext.list > /dev/null
      check_mode: no
    - name: Install SubLime Text
      apt:
        name: sublime-text
        update_cache: yes

    # Install Postman
    - name: Install Postman
      snap:
        name: postman
        classic: yes
    
    # Install Insomnia
    - name: Run Insomnia Setup Script
      shell: >
        curl -1sLf https://packages.konghq.com/public/insomnia/setup.deb.sh |
        sudo -E distro=ubuntu codename=focal bash
      check_mode: no
    - name: Install Insomnia
      apt:
        name: insomnia
        update_cache: yes

    # Install PuTTY SSH Client
    - name: Install PuTTY SSH Client
      apt:
        name: putty
        state: latest
        update_cache: yes
    
    # Install OpenVPN Client
    - name: Install OpenVPN Client
      apt:
        name: openvpn
        state: latest
        update_cache: yes

    # Install IntelliJ
    - name: Install IntelliJ IDEA Community
      snap:
        name: intellij-idea-community
        classic: yes

    # Install Microsoft Visual Studio Code
    - name: Check that Microsoft VS Code apt signing key exists
      stat:
        path: /usr/share/keyrings/vscode.gpg
      register: vscode_gpg_result
    - name: Add an apt signing key for Microsoft Visual Studio Code
      shell: curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --batch --yes --dearmor -o /usr/share/keyrings/vscode.gpg
      check_mode: no
      when: vscode_gpg_result.stat.exists == False
    - name: Check that Visual Studio Code apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/vscode.list
      register: vscode_list_result
    - name: Add apt repository for stable version of Visual Studio Code
      shell: >
        echo "deb [arch=$(dpkg --print-architecture)
        signed-by=/usr/share/keyrings/vscode.gpg]
        https://packages.microsoft.com/repos/vscode stable main" |
        tee /etc/apt/sources.list.d/vscode.list > /dev/null
      check_mode: no
      when: vscode_list_result.stat.exists == False
    - name: Install Microsoft Visual Studio Code
      apt:
        name: code
        state: present
        update_cache: yes
      check_mode: no
    - name: Confirm Microsoft Visual Studio Code is installed
      shell: code --version
      register: vscode_result
      ignore_errors: yes
      become: yes
      become_user: "{{ username }}"
    - debug:
         var: vscode_result

    # Install pgAdmin4
    - name: Check that pgAdmin4 apt signing key exists
      stat:
        path: /etc/apt/keyrings/packages_pgadmin_org.pub
      register: pgadmin_gpg_result
    - name: Add an apt signing key for pgAdmin4
      shell: curl -fsSL https://www.pgadmin.org/static/packages_pgadmin_org.pub | gpg --batch --yes --dearmor -o /etc/apt/keyrings/packages_pgadmin_org.pub
      check_mode: no
      when: pgadmin_gpg_result.stat.exists == False
    - name: Check that pgAdmin4 apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/pgAdmin.list
      register: pgadmin_list_result
    - name: Add apt repository for pgAdmin4
      shell: >
        echo "deb [arch=$(dpkg --print-architecture)
        signed-by=/etc/apt/keyrings/packages_pgadmin_org.pub]
        https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/{{ ansible_distribution_release }} pgadmin4 main" |
        tee /etc/apt/sources.list.d/pgAdmin.list > /dev/null
      check_mode: no
      when: pgadmin_list_result.stat.exists == False
    - name: Install pgAdmin4
      apt:
        name: pgadmin4
        state: latest
        update_cache: yes
      check_mode: no
   
    # Install MySQL & MySQL Workbench
    - name: Install MySQL Server
      apt:
        name: mysql-server
        state: latest
        update_cache: yes
      check_mode: no
    - name: Ensure MySQL Service is running
      systemd:
        state: started
        name: mysql 
      check_mode: no
    - name: Install MySQL Workbench
      snap:
        name: mysql-workbench-community
        classic: yes
    
    # Install MongoDB
    - name: Check that mongoDB apt signing key exists
      stat:
        path: /etc/apt/keyrings/mongodb.gpg
      register: mongodb_gpg_result
    - name: Add an apt signing key for mongoDB
      shell: curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc | gpg --batch --yes --dearmor -o /etc/apt/keyrings/mongodb.gpg
      check_mode: no
      when: mongodb_gpg_result.stat.exists == False
    - name: Check that mongoDB apt repository list file exists
      stat:
        path: /etc/apt/sources.list.d/mongodb-org-6.0.list
      register: mongodb_list_result
    - name: Add apt repository for mongoDB
      shell: >
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/mongodb.gpg] 
        https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" |
        tee /etc/apt/sources.list.d/mongodb-org-6.0.list > /dev/null
      check_mode: no
      when: mongodb_list_result.stat.exists == False
    - name: Install MongoDB
      apt:
        name: mongodb-org
        update_cache: yes      
      check_mode: no
    - name: Confirm MongoDB is installed
      shell: mongod --version
      register: mongodb_result
      ignore_errors: yes
    - debug:
         var: mongodb_result

    # Install GIMP
    - name: Install GIMP
      apt:
        name: gimp
        state: latest
        update_cache: yes


    # Install ClamAV & ClamTK
    - name: Install ClamAV packages
      apt:
        name: "{{ clamav_packages }}"
        state: latest
        update_cache: yes
      vars:
        clamav_packages:
        - clamav
        - clamav-daemon
        - clamtk

    # CLEANUP
    - name: Clean up tmp directory
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/*.deb
        - /tmp/*.sh
