- name: Set up local environment
  hosts: localhost
  connection: local
  become: yes
  become_user: root
  become_method: sudo
  tasks:

    # Install Development Packages
    - name: Install Development Packages
      apt:
        name: "{{ dev_packages }}"
        update_cache: yes
      vars:
        dev_packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg-agent

    # Install OpenJDK
    - name: "Install OpenJDK {{ openjdk_version | default('11') }}"
      apt:
        name: openjdk-{{ openjdk_version | default('11') }}-jdk
        state: latest
        install_recommends: no
        update_cache: yes
    - name: Confirm java is installed
      command: java --version
      register: java_result
      ignore_errors: yes
    - debug:
         var: java_result

    # Install Maven
    - name: Install Maven
      apt:
        name: maven
        state: latest
        install_recommends: no
        update_cache: yes
    - name: Confirm Maven is installed
      command: mvn --version
      register: maven_result
      ignore_errors: yes
    - debug:
         var: maven_result
    
    # Install Kotlin
    - name: Install Kotlin
      snap:
        name: kotlin
        classic: yes  
    - name: Confirm Kotlin is installed
      command: kotlinc -version
      register: kotlin_result
      ignore_errors: yes
    - debug:
         var: kotlin_result
    
    # Install Go
    - name: Install Go
      apt:
        name: golang
        state: latest
        update_cache: yes
    - name: Confirm Go is installed
      command: go version
      register: go_result
      ignore_errors: yes
    - debug:
         var: go_result
    
    # Install Docker
    - name: Install Docker
      snap:
        name: docker
        classic: yes  
    - name: Confirm Docker is installed
      command: docker --version
      register: docker_result
      ignore_errors: yes
    - debug:
         var: docker_result
      
    # Install Docker-Compose
    - name: Install Docker-Compose
      apt:
        name: docker-compose
        update_cache: yes
    - name: Confirm Docker-Compose is installed
      command: docker-compose --version
      register: docker_compose_result
      ignore_errors: yes
    - debug:
         var: docker_compose_result    
        
    # Install .NET Core SDK
    - name: Install DotNet SDK
      snap:
        name: dotnet-sdk
        channel: "{{ dotnet_version | default('3.1') }}"
        classic: yes
        state: present
    - name: Confirm .NET Core SDK is installed
      command: dotnet --list-sdks
      register: dotnet_result
      ignore_errors: yes
    - debug:
         var: dotnet_result

    # Install .NET Core Runtime
    - name: Install .NET Core Runtime
      snap:
        name: dotnet-runtime-{{ dotnet_version | default('31') | replace('.','') }}
        state: present
    
    # Install Python
    - name: Install Python development environment packages
      apt:
        name: "{{ python_packages }}"
        update_cache: yes
      vars:
        python_packages:
        - python{{ python_version | default('3') }}-pip
        - build-essential
        - libssl-dev
        - libffi-dev
        - python{{ python_version | default('3') }}-dev
        - python{{ python_version | default('3') }}-venv

    # Install Node.JS
    - name: Install Node.js (JavaScript run-time environment)
      apt:
        name: nodejs
        update_cache: yes
    - name: Confirm NodeJS is installed
      command: node --version
      register: node_result
      ignore_errors: yes
    - debug:
         var: node_result
 
    # Install NPM
    - name: Install NPM (Node Package Manager)
      apt:
        name: npm
        update_cache: yes      
    - name: Confirm NPM is installed
      command: npm --version
      register: npm_result
      ignore_errors: yes
    - debug:
         var: npm_result
         
    # Install Create React App
    - name: Install Create React App
      npm:
        name: create-react-app
        global: yes
        state: present
    - name: Confirm Create React App is installed
      command: create-react-app --version
      register: react_result
      ignore_errors: yes
    - debug:
         var: react_result         

    # Install Angular CLI
    - name: Install Angular CLI
      npm:
        name: "@angular/cli"
        global: yes
        state: present
    - name: Confirm Angular CLI is installed
      command: ng --version
      register: ng_result
      ignore_errors: yes
    - debug:
         var: ng_result

    # Install Notepad++
    - name: Install Notepad++
      snap:
        name: notepad-plus-plus
        classic: yes        

    # Install Postman
    - name: Install Postman
      snap:
        name: postman
    
    # Install Insomnia
    - name: Install Insomnia
      snap:
        name: insomnia

    # Install PuTTY SSH Client
    - name: Install PuTTY SSH Client
      apt:
        name: putty
        state: latest
        update_cache: yes
    
    # Install OpenVPN Client
    - name: Install OpenVPN Client
      apt:
        name: openvpn
        state: latest
        update_cache: yes

    # Install IntelliJ
    - name: Install IntelliJ IDEA Community
      snap:
        name: intellij-idea-community
        classic: yes

    # Install Microsoft Visual Studio Code
    - name: Install Microsoft Visual Studio Code
      snap:
        name: code
        classic: yes

    # Install pgAdminIII
    - name: Install pgAdminIII
      apt:
        name: pgadmin3
        state: latest
        update_cache: yes
    
    # Install MySQL Workbench
    - name: Install MySQL Workbench
      snap:
        name: mysql-workbench-community
        classic: yes
    
    # Install MongoDB
    - name: Install MongoDB
      apt:
        name: mongodb
        update_cache: yes      
    - name: Confirm MongoDB is installed
      command: mongod --version
      register: mongodb_result
      ignore_errors: yes
    - debug:
         var: mongodb_result

    # Install GIMP
    - name: Add GIMP PPA Repository
      apt_repository:
        repo: ppa:otto-kesselgulasch/gimp-edge
        state: present
        update_cache: yes
    - name: Install GIMP packages
      apt:
        name: "{{ gimp_packages }}"
        update_cache: yes
      vars:
        gimp_packages:
        - gimp
        - gimp-gmic
